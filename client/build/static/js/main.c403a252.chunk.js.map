{"version":3,"sources":["scripts/App.tsx","serviceWorker.js","scripts/AppModelOnly.tsx","index.js"],"names":["WebCamComponent","props","webcamRef","React","useRef","capture","useCallback","interval","setInterval","imageSrc","current","getScreenshot","updatedScreenshot","setTimeout","clearTimeout","audio","height","ref","screenshotFormat","width","videoConstraints","facingMode","onClick","App","socket","state","ids","latest_image","loaded_model","net","console","time","posenet","architecture","outputStride","inputResolution","multiplier","this","setState","timeEnd","load_model","socketIOClient","on","data","log","date_id","Date","uid","require","v4","emit","buffer","username","image_name","forceUpdate","className","style","JSON","stringify","undefined","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.c403a252.chunk.js","sourcesContent":["import React, { Fragment } from 'react'\nimport Webcam from 'react-webcam'\nimport '../styles/App.scss'\n\nimport socketIOClient from 'socket.io-client'\n\nimport * as posenet from '@tensorflow-models/posenet'\nexport const url = 'http://localhost:8080/'\n\ntype webcam_type = {\n\tupdatedScreenshot: (imgSrc: string) => void\n}\n\nconst WebCamComponent = (props: webcam_type) => {\n\tconst webcamRef: React.RefObject<Webcam> = React.useRef(null)\n\n\tconst capture = React.useCallback(() => {\n\t\tif (webcamRef) {\n\t\t\tconst interval = setInterval(() => {\n\t\t\t\t//\n\t\t\t\tlet imageSrc = webcamRef.current?.getScreenshot()\n\n\t\t\t\tprops.updatedScreenshot(imageSrc as string)\n\t\t\t}, 500)\n\t\t\tsetTimeout(() => {\n\t\t\t\tclearTimeout(interval)\n\t\t\t}, 60000)\n\t\t}\n\t\t// eslint-disable-next-line\n\t}, [webcamRef])\n\n\tconst videoConstraints = {\n\t\tfacingMode: 'user',\n\t}\n\n\treturn (\n\t\t<Fragment>\n\t\t\t<Webcam audio={false} height={720} ref={webcamRef} screenshotFormat='image/jpeg' width={1280} videoConstraints={videoConstraints} />\n\t\t\t<button onClick={capture}>Capture photo</button>\n\t\t</Fragment>\n\t)\n}\n\ninterface IIds {\n\t[key: string]: string\n}\n\nclass App extends React.Component<\n\t{},\n\t{\n\t\tids: IIds\n\t\tlatest_image: string\n\t\tloaded_model: boolean\n\t}\n> {\n\tprivate socket: SocketIOClient.Socket | undefined\n\tstate = {\n\t\tids: {},\n\t\tlatest_image: '',\n\t\tloaded_model: false,\n\t}\n\n\tprivate net: posenet.PoseNet | undefined\n\tasync load_model() {\n\t\tconsole.time('in')\n\t\t// const net = await posenet.load({\n\t\t// \tarchitecture: 'MobileNetV1',\n\t\t// \toutputStride: 16,\n\t\t// \tinputResolution: { width: 640, height: 480 },\n\t\t// \tmultiplier: 0.75,\n\t\t// })\n\n\t\tthis.net = await posenet.load({\n\t\t\tarchitecture: 'ResNet50',\n\t\t\toutputStride: 16,\n\t\t\tinputResolution: { width: 640, height: 480 },\n\t\t\tmultiplier: 1,\n\t\t})\n\n\t\t// console.log('loaded', this.net)\n\t\tthis.setState({ loaded_model: true })\n\t\tconsole.timeEnd('in')\n\t\t// net.estimateSinglePose()\n\t}\n\n\tcomponentDidMount() {\n\t\tthis.load_model()\n\t\tthis.socket = socketIOClient(url)\n\n\t\tthis.socket.on('processed_data', (data: any) => {\n\t\t\tconsole.log(data)\n\t\t})\n\t}\n\n\tupdatedScreenshot(data: string) {\n\t\t// console.log(data, 'data')\n\t\tif (this.state.loaded_model === false) {\n\t\t\t// this.setState({ loaded_model: true })\n\t\t\tconst date_id = new Date()\n\t\t\tconst uid = require('uuid').v4()\n\t\t\tconst ids: IIds = this.state.ids\n\n\t\t\tids[uid as string] = ''\n\n\t\t\tthis.setState({ ids })\n\n\t\t\tthis.socket?.emit('ImageByClient', {\n\t\t\t\tbuffer: data,\n\t\t\t\tusername: 'username',\n\t\t\t\timage_name: date_id,\n\t\t\t\tuid: uid,\n\t\t\t})\n\n\t\t\tthis.socket?.on('ProcessedData', (data: any) => {\n\t\t\t\tconst ids: IIds = this.state.ids\n\t\t\t\tids[data['uid']] = data['filename']\n\t\t\t\tconst latest_image = data['filename']\n\t\t\t\tthis.setState({ ids, latest_image }, () => {\n\t\t\t\t\t// console.log('file:///this.state.latest_image')\n\t\t\t\t\tthis.forceUpdate()\n\t\t\t\t})\n\t\t\t})\n\t\t} else {\n\t\t\t// const date_id = new Date()\n\t\t\tconst net = this.net\n\n\t\t\tconst uid = require('uuid').v4()\n\t\t\tconst ids: IIds = this.state.ids\n\n\t\t\tids[uid as string] = ''\n\n\t\t\tthis.setState({ ids })\n\t\t\tconsole.log(net)\n\t\t}\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<div className='App'>\n\t\t\t\t<WebCamComponent\n\t\t\t\t\tupdatedScreenshot={(data: string) => {\n\t\t\t\t\t\tthis.updatedScreenshot(data)\n\t\t\t\t\t}}\n\t\t\t\t/>\n\t\t\t\t<br />\n\t\t\t\t<div className='' style={{ width: '500px' }}>\n\t\t\t\t\t{this.state.loaded_model === false ? <div className=''>Loading Model</div> : <div className=''>Model Loaded</div>}\n\t\t\t\t\t<pre>{JSON.stringify(this.state, undefined, 8)}</pre>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t)\n\t}\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, { Fragment } from 'react'\nimport Webcam from 'react-webcam'\nimport '../styles/App.scss'\n\n// import socketIOClient from 'socket.io-clien/t'\n\n// import { browser } from '@tensorflow/tfjs'\nimport * as posenet from '@tensorflow-models/posenet'\nexport const url = 'http://localhost:8080/'\n\ntype webcam_type = {\n\tupdatedScreenshot: (imgSrc: string) => void\n}\n\nconst WebCamComponent = (props: webcam_type) => {\n\tconst webcamRef: React.RefObject<Webcam> = React.useRef(null)\n\n\tconst capture = React.useCallback(() => {\n\t\tif (webcamRef) {\n\t\t\tconst interval = setInterval(() => {\n\t\t\t\t//\n\t\t\t\tlet imageSrc = webcamRef.current?.getScreenshot()\n\n\t\t\t\tprops.updatedScreenshot(imageSrc as string)\n\t\t\t}, 500)\n\t\t\tsetTimeout(() => {\n\t\t\t\tclearTimeout(interval)\n\t\t\t}, 60000)\n\t\t}\n\t\t// eslint-disable-next-line\n\t}, [webcamRef])\n\n\tconst videoConstraints = {\n\t\tfacingMode: 'user',\n\t}\n\n\treturn (\n\t\t<Fragment>\n\t\t\t<Webcam audio={false} height={720} ref={webcamRef} screenshotFormat='image/jpeg' width={1280} videoConstraints={videoConstraints} />\n\t\t\t<button onClick={capture}>Capture photo</button>\n\t\t</Fragment>\n\t)\n}\n\ninterface IIds {\n\t[key: string]: string\n}\n\nclass AppModelOnly extends React.Component<\n\t{},\n\t{\n\t\tids: IIds\n\t\tlatest_image: string\n\t\tloaded_model: boolean\n\t}\n> {\n\tprivate socket: SocketIOClient.Socket | undefined\n\tstate = {\n\t\tids: {},\n\t\tlatest_image: '',\n\t\tloaded_model: false,\n\t}\n\n\tprivate res_net: posenet.PoseNet | undefined\n\tprivate moible_net: posenet.PoseNet | undefined\n\n\tasync load_model() {\n\t\tconsole.time('resnet loaded')\n\n\t\tthis.res_net = await posenet.load({\n\t\t\tarchitecture: 'ResNet50',\n\t\t\toutputStride: 16,\n\t\t\tinputResolution: { width: 640, height: 480 },\n\t\t\tmultiplier: 1,\n\t\t})\n\n\t\t// console.log('loaded res net', this.res_net)\n\n\t\tthis.setState({ loaded_model: true })\n\t\tconsole.timeEnd('resnet loaded')\n\t}\n\n\tasync componentDidMount() {\n\t\tconsole.log('mounted')\n\t\tconsole.time('mobilenet loaded')\n\t\tfor (let index = 0; index < 10; index++) {\n\t\t\t// posenet.load({\n\t\t\t// \tarchitecture: 'MobileNetV1',\n\t\t\t// \toutputStride: 8,\n\t\t\t// \tinputResolution: { width: 640, height: 480 },\n\t\t\t// \tmultiplier: 0.75,\n\t\t\t// })\n\t\t}\n\t\tthis.moible_net = await posenet.load({\n\t\t\tarchitecture: 'MobileNetV1',\n\t\t\toutputStride: 16,\n\t\t\tinputResolution: { width: 640, height: 480 },\n\t\t\tmultiplier: 0.75,\n\t\t})\n\t\tconsole.log('dafafd')\n\t\tconsole.timeEnd('mobilenet loaded')\n\t\tthis.load_model()\n\t}\n\n\tasync updatedScreenshot(data: string) {\n\t\tlet net\n\t\tif (this.state.loaded_model === false) {\n\t\t\tnet = this.moible_net\n\t\t} else {\n\t\t\tnet = this.res_net\n\t\t}\n\t\tconst img = new Image()\n\n\t\timg.src = data\n\t\tconst canvas = document.createElement('canvas')\n\t\tconst ctx = canvas.getContext('2d') as CanvasRenderingContext2D\n\t\tctx.drawImage(img, 0, 0)\n\n\t\t/** PoseNet logic. */\n\t\tconsole.log(net)\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<div className='App'>\n\t\t\t\t<WebCamComponent\n\t\t\t\t\tupdatedScreenshot={(data: string) => {\n\t\t\t\t\t\tthis.updatedScreenshot(data)\n\t\t\t\t\t}}\n\t\t\t\t/>\n\t\t\t\t<br />\n\t\t\t\t<div className='' style={{ width: '500px' }}>\n\t\t\t\t\t{this.state.loaded_model === false ? <div className=''>Loading Model</div> : <div className=''>Model Loaded</div>}\n\t\t\t\t\t<pre>{JSON.stringify(this.state, undefined, 8)}</pre>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t)\n\t}\n}\n\nexport default AppModelOnly\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './styles/index.scss'\n// eslint-disable-next-line\nimport App from './scripts/App'\nimport * as serviceWorker from './serviceWorker'\n// eslint-disable-next-line\nimport AppModelOnly from './scripts/AppModelOnly'\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<App />\n\t</React.StrictMode>,\n\tdocument.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register()\n"],"sourceRoot":""}