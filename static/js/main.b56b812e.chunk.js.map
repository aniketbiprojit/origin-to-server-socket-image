{"version":3,"sources":["scripts/App.tsx","serviceWorker.js","scripts/AppModelOnly.tsx","index.js"],"names":["WebCamComponent","props","webcamRef","React","useRef","capture","useCallback","interval","setInterval","imageSrc","current","getScreenshot","updatedScreenshot","setTimeout","clearTimeout","audio","height","ref","screenshotFormat","width","videoConstraints","facingMode","onClick","isLocalhost","Component","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","id","AppModelOnly","socket","ids","latest_image","loaded_model","posenet_data","res_net","mobile_net","time","posenet","architecture","outputStride","inputResolution","multiplier","this","setState","timeEnd","fromMediaStream","load_model","video","document","getElementById","addEventListener","a","net","getNet","estimateSinglePose","className","style","JSON","stringify","undefined","ReactDOM","render","StrictMode","URL","process","href","origin","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.b56b812e.chunk.js","sourcesContent":["import React, { Fragment } from 'react'\nimport Webcam from 'react-webcam'\nimport '../styles/App.scss'\n\nimport socketIOClient from 'socket.io-client'\n\nimport * as posenet from '@tensorflow-models/posenet'\nexport const url = 'http://localhost:8080/'\n\ntype webcam_type = {\n\tupdatedScreenshot: (imgSrc: string) => void\n}\n\nconst WebCamComponent = (props: webcam_type) => {\n\tconst webcamRef: React.RefObject<Webcam> = React.useRef(null)\n\n\tconst capture = React.useCallback(() => {\n\t\tif (webcamRef) {\n\t\t\tconst interval = setInterval(() => {\n\t\t\t\t//\n\t\t\t\tlet imageSrc = webcamRef.current?.getScreenshot()\n\n\t\t\t\tprops.updatedScreenshot(imageSrc as string)\n\t\t\t}, 500)\n\t\t\tsetTimeout(() => {\n\t\t\t\tclearTimeout(interval)\n\t\t\t}, 60000)\n\t\t}\n\t\t// eslint-disable-next-line\n\t}, [webcamRef])\n\n\tconst videoConstraints = {\n\t\tfacingMode: 'user',\n\t}\n\n\treturn (\n\t\t<Fragment>\n\t\t\t<Webcam audio={false} height={720} ref={webcamRef} screenshotFormat='image/jpeg' width={1280} videoConstraints={videoConstraints} />\n\t\t\t<button onClick={capture}>Capture photo</button>\n\t\t</Fragment>\n\t)\n}\n\ninterface IIds {\n\t[key: string]: string\n}\n\nclass App extends React.Component<\n\t{},\n\t{\n\t\tids: IIds\n\t\tlatest_image: string\n\t\tloaded_model: boolean\n\t}\n> {\n\tprivate socket: SocketIOClient.Socket | undefined\n\tstate = {\n\t\tids: {},\n\t\tlatest_image: '',\n\t\tloaded_model: false,\n\t}\n\n\tprivate net: posenet.PoseNet | undefined\n\tasync load_model() {\n\t\tconsole.time('in')\n\t\t// const net = await posenet.load({\n\t\t// \tarchitecture: 'MobileNetV1',\n\t\t// \toutputStride: 16,\n\t\t// \tinputResolution: { width: 640, height: 480 },\n\t\t// \tmultiplier: 0.75,\n\t\t// })\n\n\t\tthis.net = await posenet.load({\n\t\t\tarchitecture: 'ResNet50',\n\t\t\toutputStride: 16,\n\t\t\tinputResolution: { width: 640, height: 480 },\n\t\t\tmultiplier: 1,\n\t\t})\n\n\t\t// console.log('loaded', this.net)\n\t\tthis.setState({ loaded_model: true })\n\t\tconsole.timeEnd('in')\n\t\t// net.estimateSinglePose()\n\t}\n\n\tcomponentDidMount() {\n\t\tthis.load_model()\n\t\tthis.socket = socketIOClient(url)\n\n\t\tthis.socket.on('processed_data', (data: any) => {\n\t\t\tconsole.log(data)\n\t\t})\n\t}\n\n\tupdatedScreenshot(data: string) {\n\t\t// console.log(data, 'data')\n\t\tif (this.state.loaded_model === false) {\n\t\t\t// this.setState({ loaded_model: true })\n\t\t\tconst date_id = new Date()\n\t\t\tconst uid = require('uuid').v4()\n\t\t\tconst ids: IIds = this.state.ids\n\n\t\t\tids[uid as string] = ''\n\n\t\t\tthis.setState({ ids })\n\n\t\t\tthis.socket?.emit('ImageByClient', {\n\t\t\t\tbuffer: data,\n\t\t\t\tusername: 'username',\n\t\t\t\timage_name: date_id,\n\t\t\t\tuid: uid,\n\t\t\t})\n\n\t\t\tthis.socket?.on('ProcessedData', (data: any) => {\n\t\t\t\tconst ids: IIds = this.state.ids\n\t\t\t\tids[data['uid']] = data['filename']\n\t\t\t\tconst latest_image = data['filename']\n\t\t\t\tthis.setState({ ids, latest_image }, () => {\n\t\t\t\t\t// console.log('file:///this.state.latest_image')\n\t\t\t\t\tthis.forceUpdate()\n\t\t\t\t})\n\t\t\t})\n\t\t} else {\n\t\t\t// const date_id = new Date()\n\t\t\tconst net = this.net\n\n\t\t\tconst uid = require('uuid').v4()\n\t\t\tconst ids: IIds = this.state.ids\n\n\t\t\tids[uid as string] = ''\n\n\t\t\tthis.setState({ ids })\n\t\t\tconsole.log(net)\n\t\t}\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<div className='App'>\n\t\t\t\t<WebCamComponent\n\t\t\t\t\tupdatedScreenshot={(data: string) => {\n\t\t\t\t\t\tthis.updatedScreenshot(data)\n\t\t\t\t\t}}\n\t\t\t\t/>\n\t\t\t\t<br />\n\t\t\t\t<div className='' style={{ width: '500px' }}>\n\t\t\t\t\t{this.state.loaded_model === false ? <div className=''>Loading Model</div> : <div className=''>Model Loaded</div>}\n\t\t\t\t\t<pre>{JSON.stringify(this.state, undefined, 8)}</pre>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t)\n\t}\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, { Fragment } from 'react'\nimport Webcam from 'react-webcam'\nimport '../styles/App.scss'\n\n// import socketIOClient from 'socket.io-clien/t'\n\n// import { browser } from '@tensorflow/tfjs'\nimport * as posenet from '@tensorflow-models/posenet'\nexport const url = 'http://localhost:8080/'\n\ntype webcam_type = {\n\t// updatedScreenshot?: (imgSrc: string) => void\n\t// fromMediaStream: (stream: MediaStream) => void\n}\n\nconst WebCamComponent = (props: webcam_type) => {\n\tconst webcamRef: React.RefObject<Webcam> = React.useRef(null)\n\n\tconst capture = React.useCallback(() => {\n\t\tif (webcamRef) {\n\t\t\tconst interval = setInterval(() => {\n\t\t\t\t//\n\t\t\t\t// let imageSrc = webcamRef.current?.getScreenshot()\n\t\t\t\t// props.updatedScreenshot(imageSrc as string)\n\t\t\t}, 500)\n\t\t\tsetTimeout(() => {\n\t\t\t\tclearTimeout(interval)\n\t\t\t}, 60000)\n\t\t}\n\t\t// eslint-disable-next-line\n\t}, [webcamRef])\n\n\tconst videoConstraints = {\n\t\tfacingMode: 'user',\n\t}\n\n\treturn (\n\t\t<Fragment>\n\t\t\t<Webcam\n\t\t\t\taudio={false}\n\t\t\t\t// onUserMedia={(data) => props.fromMediaStream(data)}\n\t\t\t\theight={720}\n\t\t\t\tref={webcamRef}\n\t\t\t\tid='video_main_id'\n\t\t\t\tscreenshotFormat='image/jpeg'\n\t\t\t\twidth={1280}\n\t\t\t\tvideoConstraints={videoConstraints}\n\t\t\t/>\n\t\t\t<button onClick={capture}>Capture photo</button>\n\t\t</Fragment>\n\t)\n}\n\ninterface IIds {\n\t[key: string]: string\n}\n\ntype loading_types = 'loading' | 'mobile_net' | 'res_net'\n\nclass AppModelOnly extends React.Component<\n\t{},\n\t{\n\t\tids: IIds\n\t\tlatest_image: string\n\t\tloaded_model: loading_types\n\t\tposenet_data: Object\n\t}\n> {\n\tprivate socket: SocketIOClient.Socket | undefined\n\tstate = {\n\t\tids: {},\n\t\tlatest_image: '',\n\t\tloaded_model: 'loading' as loading_types,\n\t\tposenet_data: {},\n\t}\n\n\tprivate res_net: posenet.PoseNet | undefined\n\tprivate mobile_net: posenet.PoseNet | undefined\n\n\tasync load_model() {\n\t\tconsole.time('resnet loaded')\n\n\t\tthis.res_net = await posenet.load({\n\t\t\tarchitecture: 'ResNet50',\n\t\t\toutputStride: 16,\n\t\t\tinputResolution: { width: 640, height: 480 },\n\t\t\tmultiplier: 1,\n\t\t})\n\n\t\t// console.log('loaded res net', this.res_net)\n\n\t\tthis.setState({ loaded_model: 'res_net' })\n\t\tconsole.timeEnd('resnet loaded')\n\t}\n\n\tasync componentDidMount() {\n\t\tconsole.log('mounted')\n\t\tconsole.time('mobilenet loaded')\n\n\t\tthis.mobile_net = await posenet.load({\n\t\t\tarchitecture: 'MobileNetV1',\n\t\t\toutputStride: 16,\n\t\t\tinputResolution: { width: 640, height: 480 },\n\t\t\tmultiplier: 0.75,\n\t\t})\n\t\tthis.setState({ loaded_model: 'mobile_net' })\n\n\t\tthis.fromMediaStream()\n\n\t\tconsole.log('dafafd')\n\t\tconsole.timeEnd('mobilenet loaded')\n\t\tthis.load_model()\n\t}\n\n\t// async updatedScreenshot(data: string) {\n\t// \tlet net\n\t// \tif (this.state.loaded_model === false) {\n\t// \t\tnet = this.moible_net as any\n\t// \t} else {\n\t// \t\tnet = this.res_net as any\n\t// \t}\n\t// \tconst img = new Image()\n\n\t// \timg.src = data\n\t// \tconst canvas = document.createElement('canvas')\n\t// \tconst ctx = canvas.getContext('2d') as CanvasRenderingContext2D\n\t// \tctx.drawImage(img, 0, 0)\n\n\t// \t/** PoseNet logic. */\n\t// \tconsole.log(net)\n\t// \t// net?.estimateSinglePose()\n\t// }\n\n\tgetNet() {\n\t\tlet net: posenet.PoseNet\n\t\tif (this.state.loaded_model !== 'res_net') {\n\t\t\tnet = this.mobile_net as posenet.PoseNet\n\t\t} else {\n\t\t\tnet = this.res_net as posenet.PoseNet\n\t\t}\n\t\treturn net\n\t}\n\n\tasync fromMediaStream() {\n\t\tconst video = document.getElementById('video_main_id')\n\t\t// console.log(video)\n\t\tvideo?.addEventListener('loadeddata', async () => {\n\t\t\ttry {\n\t\t\t\tconst net = this.getNet()\n\t\t\t\tsetInterval(async () => {\n\t\t\t\t\tthis.setState({ posenet_data: await net.estimateSinglePose(video as any) })\n\t\t\t\t\t// console.log()\n\t\t\t\t}, 500)\n\t\t\t} catch (error) {\n\t\t\t\tconsole.log(error)\n\t\t\t}\n\t\t})\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<div className='App'>\n\t\t\t\t<WebCamComponent\n\t\t\t\t// updatedScreenshot={(data: string) => {\n\t\t\t\t// \tthis.updatedScreenshot(data)\n\t\t\t\t// }}\n\t\t\t\t// fromMediaStream={(data: MediaStream) => {\n\t\t\t\t// \tthis.fromMediaStream()\n\t\t\t\t// }}\n\t\t\t\t/>\n\t\t\t\t<br />\n\t\t\t\t<div className='' style={{ width: '500px' }}>\n\t\t\t\t\t{this.state.loaded_model === 'loading' ? (\n\t\t\t\t\t\t<div className=''>Loading Model</div>\n\t\t\t\t\t) : (\n\t\t\t\t\t\t<div className=''>Loaded {this.state.loaded_model}</div>\n\t\t\t\t\t)}\n\t\t\t\t\t<pre>{JSON.stringify(this.state, undefined, 8)}</pre>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t)\n\t}\n}\n\nexport default AppModelOnly\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './styles/index.scss'\n// eslint-disable-next-line\nimport App from './scripts/App'\nimport * as serviceWorker from './serviceWorker'\n// eslint-disable-next-line\nimport AppModelOnly from './scripts/AppModelOnly'\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<AppModelOnly></AppModelOnly>\n\t</React.StrictMode>,\n\tdocument.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register()\n"],"sourceRoot":""}